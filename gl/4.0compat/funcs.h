
// ** file automatically generated by glgen -- do not edit manually **

#ifndef __cplusplus
#include <inttypes.h>
#include <stddef.h>
typedef unsigned int	GLenum;
typedef unsigned char	GLboolean;
typedef unsigned int	GLbitfield;
typedef void		GLvoid;
typedef char            GLchar;
typedef signed char	GLbyte;		/* 1-byte signed */
typedef short		GLshort;	/* 2-byte signed */
typedef int		GLint;		/* 4-byte signed */
typedef unsigned char	GLubyte;	/* 1-byte unsigned */
typedef unsigned short	GLushort;	/* 2-byte unsigned */
typedef unsigned int	GLuint;		/* 4-byte unsigned */
typedef int		GLsizei;	/* 4-byte signed */
typedef float		GLfloat;	/* single precision float */
typedef float		GLclampf;	/* single precision float in [0,1] */
typedef double		GLdouble;	/* double precision float */
typedef double		GLclampd;	/* double precision float in [0,1] */
typedef int64_t         GLint64;
typedef uint64_t        GLuint64;
typedef ptrdiff_t       GLintptr;
typedef ptrdiff_t       GLsizeiptr;
typedef ptrdiff_t       GLintptrARB;
typedef ptrdiff_t       GLsizeiptrARB;
typedef struct __GLsync *GLsync;
#endif

#ifdef __cplusplus
extern "C" {
#endif

void *gl4_0compat_funcs();

void gl4_0compat_glViewport(void *_glfuncs, GLint x, GLint y, GLsizei width, GLsizei height);
void gl4_0compat_glDepthRange(void *_glfuncs, GLdouble nearVal, GLdouble farVal);
GLboolean gl4_0compat_glIsEnabled(void *_glfuncs, GLenum cap);
void gl4_0compat_glGetTexLevelParameteriv(void *_glfuncs, GLenum target, GLint level, GLenum pname, GLint* params);
void gl4_0compat_glGetTexLevelParameterfv(void *_glfuncs, GLenum target, GLint level, GLenum pname, GLfloat* params);
void gl4_0compat_glGetTexParameteriv(void *_glfuncs, GLenum target, GLenum pname, GLint* params);
void gl4_0compat_glGetTexParameterfv(void *_glfuncs, GLenum target, GLenum pname, GLfloat* params);
void gl4_0compat_glGetTexImage(void *_glfuncs, GLenum target, GLint level, GLenum format, GLenum gltype, GLvoid* pixels);
void gl4_0compat_glGetIntegerv(void *_glfuncs, GLenum pname, GLint* params);
void gl4_0compat_glGetFloatv(void *_glfuncs, GLenum pname, GLfloat* params);
GLenum gl4_0compat_glGetError(void *_glfuncs);
void gl4_0compat_glGetDoublev(void *_glfuncs, GLenum pname, GLdouble* params);
void gl4_0compat_glGetBooleanv(void *_glfuncs, GLenum pname, GLboolean* params);
void gl4_0compat_glReadPixels(void *_glfuncs, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum gltype, GLvoid* pixels);
void gl4_0compat_glReadBuffer(void *_glfuncs, GLenum mode);
void gl4_0compat_glPixelStorei(void *_glfuncs, GLenum pname, GLint param);
void gl4_0compat_glPixelStoref(void *_glfuncs, GLenum pname, GLfloat param);
void gl4_0compat_glDepthFunc(void *_glfuncs, GLenum glfunc);
void gl4_0compat_glStencilOp(void *_glfuncs, GLenum fail, GLenum zfail, GLenum zpass);
void gl4_0compat_glStencilFunc(void *_glfuncs, GLenum glfunc, GLint ref, GLuint mask);
void gl4_0compat_glLogicOp(void *_glfuncs, GLenum opcode);
void gl4_0compat_glBlendFunc(void *_glfuncs, GLenum sfactor, GLenum dfactor);
void gl4_0compat_glFlush(void *_glfuncs);
void gl4_0compat_glFinish(void *_glfuncs);
void gl4_0compat_glEnable(void *_glfuncs, GLenum cap);
void gl4_0compat_glDisable(void *_glfuncs, GLenum cap);
void gl4_0compat_glDepthMask(void *_glfuncs, GLboolean flag);
void gl4_0compat_glColorMask(void *_glfuncs, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void gl4_0compat_glStencilMask(void *_glfuncs, GLuint mask);
void gl4_0compat_glClearDepth(void *_glfuncs, GLdouble depth);
void gl4_0compat_glClearStencil(void *_glfuncs, GLint s);
void gl4_0compat_glClearColor(void *_glfuncs, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void gl4_0compat_glClear(void *_glfuncs, GLbitfield mask);
void gl4_0compat_glDrawBuffer(void *_glfuncs, GLenum mode);
void gl4_0compat_glTexImage2D(void *_glfuncs, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum gltype, const GLvoid* pixels);
void gl4_0compat_glTexImage1D(void *_glfuncs, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum gltype, const GLvoid* pixels);
void gl4_0compat_glTexParameteriv(void *_glfuncs, GLenum target, GLenum pname, const GLint* params);
void gl4_0compat_glTexParameteri(void *_glfuncs, GLenum target, GLenum pname, GLint param);
void gl4_0compat_glTexParameterfv(void *_glfuncs, GLenum target, GLenum pname, const GLfloat* params);
void gl4_0compat_glTexParameterf(void *_glfuncs, GLenum target, GLenum pname, GLfloat param);
void gl4_0compat_glScissor(void *_glfuncs, GLint x, GLint y, GLsizei width, GLsizei height);
void gl4_0compat_glPolygonMode(void *_glfuncs, GLenum face, GLenum mode);
void gl4_0compat_glPointSize(void *_glfuncs, GLfloat size);
void gl4_0compat_glLineWidth(void *_glfuncs, GLfloat width);
void gl4_0compat_glHint(void *_glfuncs, GLenum target, GLenum mode);
void gl4_0compat_glFrontFace(void *_glfuncs, GLenum mode);
void gl4_0compat_glCullFace(void *_glfuncs, GLenum mode);
void gl4_0compat_glIndexubv(void *_glfuncs, const GLubyte* c);
void gl4_0compat_glIndexub(void *_glfuncs, GLubyte c);
GLboolean gl4_0compat_glIsTexture(void *_glfuncs, GLuint texture);
void gl4_0compat_glGenTextures(void *_glfuncs, GLsizei n, GLuint* textures);
void gl4_0compat_glDeleteTextures(void *_glfuncs, GLsizei n, const GLuint* textures);
void gl4_0compat_glBindTexture(void *_glfuncs, GLenum target, GLuint texture);
void gl4_0compat_glTexSubImage2D(void *_glfuncs, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum gltype, const GLvoid* pixels);
void gl4_0compat_glTexSubImage1D(void *_glfuncs, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum gltype, const GLvoid* pixels);
void gl4_0compat_glCopyTexSubImage2D(void *_glfuncs, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void gl4_0compat_glCopyTexSubImage1D(void *_glfuncs, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void gl4_0compat_glCopyTexImage2D(void *_glfuncs, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void gl4_0compat_glCopyTexImage1D(void *_glfuncs, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
void gl4_0compat_glPolygonOffset(void *_glfuncs, GLfloat factor, GLfloat units);
void gl4_0compat_glDrawElements(void *_glfuncs, GLenum mode, GLsizei count, GLenum gltype, const GLvoid* indices);
void gl4_0compat_glDrawArrays(void *_glfuncs, GLenum mode, GLint first, GLsizei count);
void gl4_0compat_glCopyTexSubImage3D(void *_glfuncs, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void gl4_0compat_glTexSubImage3D(void *_glfuncs, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum gltype, const GLvoid* pixels);
void gl4_0compat_glTexImage3D(void *_glfuncs, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum gltype, const GLvoid* pixels);
void gl4_0compat_glDrawRangeElements(void *_glfuncs, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum gltype, const GLvoid* indices);
void gl4_0compat_glBlendEquation(void *_glfuncs, GLenum mode);
void gl4_0compat_glBlendColor(void *_glfuncs, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void gl4_0compat_glGetCompressedTexImage(void *_glfuncs, GLenum target, GLint level, GLvoid* img);
void gl4_0compat_glCompressedTexSubImage1D(void *_glfuncs, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data);
void gl4_0compat_glCompressedTexSubImage2D(void *_glfuncs, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data);
void gl4_0compat_glCompressedTexSubImage3D(void *_glfuncs, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data);
void gl4_0compat_glCompressedTexImage1D(void *_glfuncs, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data);
void gl4_0compat_glCompressedTexImage2D(void *_glfuncs, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data);
void gl4_0compat_glCompressedTexImage3D(void *_glfuncs, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data);
void gl4_0compat_glSampleCoverage(void *_glfuncs, GLfloat value, GLboolean invert);
void gl4_0compat_glActiveTexture(void *_glfuncs, GLenum texture);
void gl4_0compat_glPointParameteriv(void *_glfuncs, GLenum pname, const GLint* params);
void gl4_0compat_glPointParameteri(void *_glfuncs, GLenum pname, GLint param);
void gl4_0compat_glPointParameterfv(void *_glfuncs, GLenum pname, const GLfloat* params);
void gl4_0compat_glPointParameterf(void *_glfuncs, GLenum pname, GLfloat param);
void gl4_0compat_glMultiDrawArrays(void *_glfuncs, GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount);
void gl4_0compat_glBlendFuncSeparate(void *_glfuncs, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void gl4_0compat_glGetBufferParameteriv(void *_glfuncs, GLenum target, GLenum pname, GLint* params);
GLboolean gl4_0compat_glUnmapBuffer(void *_glfuncs, GLenum target);
void gl4_0compat_glGetBufferSubData(void *_glfuncs, GLenum target, GLintptr offset, GLsizeiptr size, GLvoid* data);
void gl4_0compat_glBufferSubData(void *_glfuncs, GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data);
void gl4_0compat_glBufferData(void *_glfuncs, GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage);
GLboolean gl4_0compat_glIsBuffer(void *_glfuncs, GLuint buffer);
void gl4_0compat_glGenBuffers(void *_glfuncs, GLsizei n, GLuint* buffers);
void gl4_0compat_glDeleteBuffers(void *_glfuncs, GLsizei n, const GLuint* buffers);
void gl4_0compat_glBindBuffer(void *_glfuncs, GLenum target, GLuint buffer);
void gl4_0compat_glGetQueryObjectuiv(void *_glfuncs, GLuint id, GLenum pname, GLuint* params);
void gl4_0compat_glGetQueryObjectiv(void *_glfuncs, GLuint id, GLenum pname, GLint* params);
void gl4_0compat_glGetQueryiv(void *_glfuncs, GLenum target, GLenum pname, GLint* params);
void gl4_0compat_glEndQuery(void *_glfuncs, GLenum target);
void gl4_0compat_glBeginQuery(void *_glfuncs, GLenum target, GLuint id);
GLboolean gl4_0compat_glIsQuery(void *_glfuncs, GLuint id);
void gl4_0compat_glDeleteQueries(void *_glfuncs, GLsizei n, const GLuint* ids);
void gl4_0compat_glGenQueries(void *_glfuncs, GLsizei n, GLuint* ids);
void gl4_0compat_glVertexAttribPointer(void *_glfuncs, GLuint index, GLint size, GLenum gltype, GLboolean normalized, GLsizei stride, const GLvoid* offset);
void gl4_0compat_glValidateProgram(void *_glfuncs, GLuint program);
void gl4_0compat_glUniformMatrix4fv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void gl4_0compat_glUniformMatrix3fv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void gl4_0compat_glUniformMatrix2fv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void gl4_0compat_glUniform4iv(void *_glfuncs, GLint location, GLsizei count, const GLint* value);
void gl4_0compat_glUniform3iv(void *_glfuncs, GLint location, GLsizei count, const GLint* value);
void gl4_0compat_glUniform2iv(void *_glfuncs, GLint location, GLsizei count, const GLint* value);
void gl4_0compat_glUniform1iv(void *_glfuncs, GLint location, GLsizei count, const GLint* value);
void gl4_0compat_glUniform4fv(void *_glfuncs, GLint location, GLsizei count, const GLfloat* value);
void gl4_0compat_glUniform3fv(void *_glfuncs, GLint location, GLsizei count, const GLfloat* value);
void gl4_0compat_glUniform2fv(void *_glfuncs, GLint location, GLsizei count, const GLfloat* value);
void gl4_0compat_glUniform1fv(void *_glfuncs, GLint location, GLsizei count, const GLfloat* value);
void gl4_0compat_glUniform4i(void *_glfuncs, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void gl4_0compat_glUniform3i(void *_glfuncs, GLint location, GLint v0, GLint v1, GLint v2);
void gl4_0compat_glUniform2i(void *_glfuncs, GLint location, GLint v0, GLint v1);
void gl4_0compat_glUniform1i(void *_glfuncs, GLint location, GLint v0);
void gl4_0compat_glUniform4f(void *_glfuncs, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void gl4_0compat_glUniform3f(void *_glfuncs, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void gl4_0compat_glUniform2f(void *_glfuncs, GLint location, GLfloat v0, GLfloat v1);
void gl4_0compat_glUniform1f(void *_glfuncs, GLint location, GLfloat v0);
void gl4_0compat_glUseProgram(void *_glfuncs, GLuint program);
void gl4_0compat_glShaderSource(void *_glfuncs, GLuint shader, GLsizei count, const GLchar** source, const GLint* length);
void gl4_0compat_glLinkProgram(void *_glfuncs, GLuint program);
GLboolean gl4_0compat_glIsShader(void *_glfuncs, GLuint shader);
GLboolean gl4_0compat_glIsProgram(void *_glfuncs, GLuint program);
void gl4_0compat_glGetVertexAttribiv(void *_glfuncs, GLuint index, GLenum pname, GLint* params);
void gl4_0compat_glGetVertexAttribfv(void *_glfuncs, GLuint index, GLenum pname, GLfloat* params);
void gl4_0compat_glGetVertexAttribdv(void *_glfuncs, GLuint index, GLenum pname, GLdouble* params);
void gl4_0compat_glGetUniformiv(void *_glfuncs, GLuint program, GLint location, GLint* params);
void gl4_0compat_glGetUniformfv(void *_glfuncs, GLuint program, GLint location, GLfloat* params);
GLint gl4_0compat_glGetUniformLocation(void *_glfuncs, GLuint program, const GLchar* name);
void gl4_0compat_glGetShaderSource(void *_glfuncs, GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
void gl4_0compat_glGetShaderInfoLog(void *_glfuncs, GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
void gl4_0compat_glGetShaderiv(void *_glfuncs, GLuint shader, GLenum pname, GLint* params);
void gl4_0compat_glGetProgramInfoLog(void *_glfuncs, GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
void gl4_0compat_glGetProgramiv(void *_glfuncs, GLuint program, GLenum pname, GLint* params);
GLint gl4_0compat_glGetAttribLocation(void *_glfuncs, GLuint program, const GLchar* name);
void gl4_0compat_glGetAttachedShaders(void *_glfuncs, GLuint program, GLsizei maxCount, GLsizei* count, GLuint* obj);
void gl4_0compat_glGetActiveUniform(void *_glfuncs, GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* gltype, GLchar* name);
void gl4_0compat_glGetActiveAttrib(void *_glfuncs, GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* gltype, GLchar* name);
void gl4_0compat_glEnableVertexAttribArray(void *_glfuncs, GLuint index);
void gl4_0compat_glDisableVertexAttribArray(void *_glfuncs, GLuint index);
void gl4_0compat_glDetachShader(void *_glfuncs, GLuint program, GLuint shader);
void gl4_0compat_glDeleteShader(void *_glfuncs, GLuint shader);
void gl4_0compat_glDeleteProgram(void *_glfuncs, GLuint program);
GLuint gl4_0compat_glCreateShader(void *_glfuncs, GLenum gltype);
GLuint gl4_0compat_glCreateProgram(void *_glfuncs);
void gl4_0compat_glCompileShader(void *_glfuncs, GLuint shader);
void gl4_0compat_glBindAttribLocation(void *_glfuncs, GLuint program, GLuint index, const GLchar* name);
void gl4_0compat_glAttachShader(void *_glfuncs, GLuint program, GLuint shader);
void gl4_0compat_glStencilMaskSeparate(void *_glfuncs, GLenum face, GLuint mask);
void gl4_0compat_glStencilFuncSeparate(void *_glfuncs, GLenum face, GLenum glfunc, GLint ref, GLuint mask);
void gl4_0compat_glStencilOpSeparate(void *_glfuncs, GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void gl4_0compat_glDrawBuffers(void *_glfuncs, GLsizei n, const GLenum* bufs);
void gl4_0compat_glBlendEquationSeparate(void *_glfuncs, GLenum modeRGB, GLenum modeAlpha);
void gl4_0compat_glUniformMatrix4x3fv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void gl4_0compat_glUniformMatrix3x4fv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void gl4_0compat_glUniformMatrix4x2fv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void gl4_0compat_glUniformMatrix2x4fv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void gl4_0compat_glUniformMatrix3x2fv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void gl4_0compat_glUniformMatrix2x3fv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLboolean gl4_0compat_glIsVertexArray(void *_glfuncs, GLuint array);
void gl4_0compat_glGenVertexArrays(void *_glfuncs, GLsizei n, GLuint* arrays);
void gl4_0compat_glDeleteVertexArrays(void *_glfuncs, GLsizei n, const GLuint* arrays);
void gl4_0compat_glBindVertexArray(void *_glfuncs, GLuint array);
void gl4_0compat_glFlushMappedBufferRange(void *_glfuncs, GLenum target, GLintptr offset, GLsizeiptr length);
void gl4_0compat_glFramebufferTextureLayer(void *_glfuncs, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void gl4_0compat_glRenderbufferStorageMultisample(void *_glfuncs, GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height);
void gl4_0compat_glBlitFramebuffer(void *_glfuncs, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void gl4_0compat_glGenerateMipmap(void *_glfuncs, GLenum target);
void gl4_0compat_glGetFramebufferAttachmentParameteriv(void *_glfuncs, GLenum target, GLenum attachment, GLenum pname, GLint* params);
void gl4_0compat_glFramebufferRenderbuffer(void *_glfuncs, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void gl4_0compat_glFramebufferTexture3D(void *_glfuncs, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void gl4_0compat_glFramebufferTexture2D(void *_glfuncs, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void gl4_0compat_glFramebufferTexture1D(void *_glfuncs, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLenum gl4_0compat_glCheckFramebufferStatus(void *_glfuncs, GLenum target);
void gl4_0compat_glGenFramebuffers(void *_glfuncs, GLsizei n, GLuint* framebuffers);
void gl4_0compat_glDeleteFramebuffers(void *_glfuncs, GLsizei n, const GLuint* framebuffers);
void gl4_0compat_glBindFramebuffer(void *_glfuncs, GLenum target, GLuint framebuffer);
GLboolean gl4_0compat_glIsFramebuffer(void *_glfuncs, GLuint framebuffer);
void gl4_0compat_glGetRenderbufferParameteriv(void *_glfuncs, GLenum target, GLenum pname, GLint* params);
void gl4_0compat_glRenderbufferStorage(void *_glfuncs, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height);
void gl4_0compat_glGenRenderbuffers(void *_glfuncs, GLsizei n, GLuint* renderbuffers);
void gl4_0compat_glDeleteRenderbuffers(void *_glfuncs, GLsizei n, const GLuint* renderbuffers);
void gl4_0compat_glBindRenderbuffer(void *_glfuncs, GLenum target, GLuint renderbuffer);
GLboolean gl4_0compat_glIsRenderbuffer(void *_glfuncs, GLuint renderbuffer);
void gl4_0compat_glClearBufferfi(void *_glfuncs, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void gl4_0compat_glClearBufferfv(void *_glfuncs, GLenum buffer, GLint drawbuffer, const GLfloat* value);
void gl4_0compat_glClearBufferuiv(void *_glfuncs, GLenum buffer, GLint drawbuffer, const GLuint* value);
void gl4_0compat_glClearBufferiv(void *_glfuncs, GLenum buffer, GLint drawbuffer, const GLint* value);
void gl4_0compat_glGetTexParameterIuiv(void *_glfuncs, GLenum target, GLenum pname, GLuint* params);
void gl4_0compat_glGetTexParameterIiv(void *_glfuncs, GLenum target, GLenum pname, GLint* params);
void gl4_0compat_glTexParameterIuiv(void *_glfuncs, GLenum target, GLenum pname, const GLuint* params);
void gl4_0compat_glTexParameterIiv(void *_glfuncs, GLenum target, GLenum pname, const GLint* params);
void gl4_0compat_glUniform4uiv(void *_glfuncs, GLint location, GLsizei count, const GLuint* value);
void gl4_0compat_glUniform3uiv(void *_glfuncs, GLint location, GLsizei count, const GLuint* value);
void gl4_0compat_glUniform2uiv(void *_glfuncs, GLint location, GLsizei count, const GLuint* value);
void gl4_0compat_glUniform1uiv(void *_glfuncs, GLint location, GLsizei count, const GLuint* value);
void gl4_0compat_glUniform4ui(void *_glfuncs, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void gl4_0compat_glUniform3ui(void *_glfuncs, GLint location, GLuint v0, GLuint v1, GLuint v2);
void gl4_0compat_glUniform2ui(void *_glfuncs, GLint location, GLuint v0, GLuint v1);
void gl4_0compat_glUniform1ui(void *_glfuncs, GLint location, GLuint v0);
GLint gl4_0compat_glGetFragDataLocation(void *_glfuncs, GLuint program, const GLchar* name);
void gl4_0compat_glBindFragDataLocation(void *_glfuncs, GLuint program, GLuint color, const GLchar* name);
void gl4_0compat_glGetUniformuiv(void *_glfuncs, GLuint program, GLint location, GLuint* params);
void gl4_0compat_glGetVertexAttribIuiv(void *_glfuncs, GLuint index, GLenum pname, GLuint* params);
void gl4_0compat_glGetVertexAttribIiv(void *_glfuncs, GLuint index, GLenum pname, GLint* params);
void gl4_0compat_glVertexAttribIPointer(void *_glfuncs, GLuint index, GLint size, GLenum gltype, GLsizei stride, const GLvoid* pointer);
void gl4_0compat_glEndConditionalRender(void *_glfuncs);
void gl4_0compat_glBeginConditionalRender(void *_glfuncs, GLuint id, GLenum mode);
void gl4_0compat_glClampColor(void *_glfuncs, GLenum target, GLenum clamp);
void gl4_0compat_glGetTransformFeedbackVarying(void *_glfuncs, GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* gltype, GLchar* name);
void gl4_0compat_glBindBufferBase(void *_glfuncs, GLenum target, GLuint index, GLuint buffer);
void gl4_0compat_glBindBufferRange(void *_glfuncs, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void gl4_0compat_glEndTransformFeedback(void *_glfuncs);
void gl4_0compat_glBeginTransformFeedback(void *_glfuncs, GLenum primitiveMode);
GLboolean gl4_0compat_glIsEnabledi(void *_glfuncs, GLenum target, GLuint index);
void gl4_0compat_glDisablei(void *_glfuncs, GLenum target, GLuint index);
void gl4_0compat_glEnablei(void *_glfuncs, GLenum target, GLuint index);
void gl4_0compat_glGetIntegeri_v(void *_glfuncs, GLenum target, GLuint index, GLint* data);
void gl4_0compat_glGetBooleani_v(void *_glfuncs, GLenum target, GLuint index, GLboolean* data);
void gl4_0compat_glColorMaski(void *_glfuncs, GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void gl4_0compat_glCopyBufferSubData(void *_glfuncs, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void gl4_0compat_glUniformBlockBinding(void *_glfuncs, GLuint program, GLuint v0, GLuint v1);
void gl4_0compat_glGetActiveUniformBlockName(void *_glfuncs, GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
void gl4_0compat_glGetActiveUniformBlockiv(void *_glfuncs, GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
GLuint gl4_0compat_glGetUniformBlockIndex(void *_glfuncs, GLuint program, const GLchar* uniformBlockName);
void gl4_0compat_glGetActiveUniformName(void *_glfuncs, GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
void gl4_0compat_glGetActiveUniformsiv(void *_glfuncs, GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params);
void gl4_0compat_glPrimitiveRestartIndex(void *_glfuncs, GLuint index);
void gl4_0compat_glTexBuffer(void *_glfuncs, GLenum target, GLenum internalFormat, GLuint buffer);
void gl4_0compat_glDrawElementsInstanced(void *_glfuncs, GLenum mode, GLsizei count, GLenum gltype, const GLvoid* indices, GLsizei instancecount);
void gl4_0compat_glDrawArraysInstanced(void *_glfuncs, GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
void gl4_0compat_glSampleMaski(void *_glfuncs, GLuint index, GLbitfield mask);
void gl4_0compat_glGetMultisamplefv(void *_glfuncs, GLenum pname, GLuint index, GLfloat* val);
void gl4_0compat_glTexImage3DMultisample(void *_glfuncs, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void gl4_0compat_glTexImage2DMultisample(void *_glfuncs, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void gl4_0compat_glGetSynciv(void *_glfuncs, GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);
void gl4_0compat_glGetInteger64v(void *_glfuncs, GLenum pname, GLint64* params);
void gl4_0compat_glWaitSync(void *_glfuncs, GLsync sync, GLbitfield flags, GLuint64 timeout);
GLenum gl4_0compat_glClientWaitSync(void *_glfuncs, GLsync sync, GLbitfield flags, GLuint64 timeout);
void gl4_0compat_glDeleteSync(void *_glfuncs, GLsync sync);
GLboolean gl4_0compat_glIsSync(void *_glfuncs, GLsync sync);
GLsync gl4_0compat_glFenceSync(void *_glfuncs, GLenum condition, GLbitfield flags);
void gl4_0compat_glProvokingVertex(void *_glfuncs, GLenum mode);
void gl4_0compat_glDrawElementsInstancedBaseVertex(void *_glfuncs, GLenum mode, GLsizei count, GLenum gltype, const GLvoid* indices, GLsizei instancecount, GLint basevertex);
void gl4_0compat_glDrawRangeElementsBaseVertex(void *_glfuncs, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum gltype, const GLvoid* indices, GLint basevertex);
void gl4_0compat_glDrawElementsBaseVertex(void *_glfuncs, GLenum mode, GLsizei count, GLenum gltype, const GLvoid* indices, GLint basevertex);
void gl4_0compat_glFramebufferTexture(void *_glfuncs, GLenum target, GLenum attachment, GLuint texture, GLint level);
void gl4_0compat_glGetBufferParameteri64v(void *_glfuncs, GLenum target, GLenum pname, GLint64* params);
void gl4_0compat_glGetInteger64i_v(void *_glfuncs, GLenum target, GLuint index, GLint64* data);
void gl4_0compat_glVertexAttribP4uiv(void *_glfuncs, GLuint index, GLenum gltype, GLboolean normalized, const GLuint* value);
void gl4_0compat_glVertexAttribP4ui(void *_glfuncs, GLuint index, GLenum gltype, GLboolean normalized, GLuint value);
void gl4_0compat_glVertexAttribP3uiv(void *_glfuncs, GLuint index, GLenum gltype, GLboolean normalized, const GLuint* value);
void gl4_0compat_glVertexAttribP3ui(void *_glfuncs, GLuint index, GLenum gltype, GLboolean normalized, GLuint value);
void gl4_0compat_glVertexAttribP2uiv(void *_glfuncs, GLuint index, GLenum gltype, GLboolean normalized, const GLuint* value);
void gl4_0compat_glVertexAttribP2ui(void *_glfuncs, GLuint index, GLenum gltype, GLboolean normalized, GLuint value);
void gl4_0compat_glVertexAttribP1uiv(void *_glfuncs, GLuint index, GLenum gltype, GLboolean normalized, const GLuint* value);
void gl4_0compat_glVertexAttribP1ui(void *_glfuncs, GLuint index, GLenum gltype, GLboolean normalized, GLuint value);
void gl4_0compat_glSecondaryColorP3uiv(void *_glfuncs, GLenum gltype, const GLuint* color);
void gl4_0compat_glSecondaryColorP3ui(void *_glfuncs, GLenum gltype, GLuint color);
void gl4_0compat_glColorP4uiv(void *_glfuncs, GLenum gltype, const GLuint* color);
void gl4_0compat_glColorP4ui(void *_glfuncs, GLenum gltype, GLuint color);
void gl4_0compat_glColorP3uiv(void *_glfuncs, GLenum gltype, const GLuint* color);
void gl4_0compat_glColorP3ui(void *_glfuncs, GLenum gltype, GLuint color);
void gl4_0compat_glNormalP3uiv(void *_glfuncs, GLenum gltype, const GLuint* coords);
void gl4_0compat_glNormalP3ui(void *_glfuncs, GLenum gltype, GLuint coords);
void gl4_0compat_glMultiTexCoordP4uiv(void *_glfuncs, GLenum texture, GLenum gltype, const GLuint* coords);
void gl4_0compat_glMultiTexCoordP4ui(void *_glfuncs, GLenum texture, GLenum gltype, GLuint coords);
void gl4_0compat_glMultiTexCoordP3uiv(void *_glfuncs, GLenum texture, GLenum gltype, const GLuint* coords);
void gl4_0compat_glMultiTexCoordP3ui(void *_glfuncs, GLenum texture, GLenum gltype, GLuint coords);
void gl4_0compat_glMultiTexCoordP2uiv(void *_glfuncs, GLenum texture, GLenum gltype, const GLuint* coords);
void gl4_0compat_glMultiTexCoordP2ui(void *_glfuncs, GLenum texture, GLenum gltype, GLuint coords);
void gl4_0compat_glMultiTexCoordP1uiv(void *_glfuncs, GLenum texture, GLenum gltype, const GLuint* coords);
void gl4_0compat_glMultiTexCoordP1ui(void *_glfuncs, GLenum texture, GLenum gltype, GLuint coords);
void gl4_0compat_glTexCoordP4uiv(void *_glfuncs, GLenum gltype, const GLuint* coords);
void gl4_0compat_glTexCoordP4ui(void *_glfuncs, GLenum gltype, GLuint coords);
void gl4_0compat_glTexCoordP3uiv(void *_glfuncs, GLenum gltype, const GLuint* coords);
void gl4_0compat_glTexCoordP3ui(void *_glfuncs, GLenum gltype, GLuint coords);
void gl4_0compat_glTexCoordP2uiv(void *_glfuncs, GLenum gltype, const GLuint* coords);
void gl4_0compat_glTexCoordP2ui(void *_glfuncs, GLenum gltype, GLuint coords);
void gl4_0compat_glTexCoordP1uiv(void *_glfuncs, GLenum gltype, const GLuint* coords);
void gl4_0compat_glTexCoordP1ui(void *_glfuncs, GLenum gltype, GLuint coords);
void gl4_0compat_glVertexP4uiv(void *_glfuncs, GLenum gltype, const GLuint* value);
void gl4_0compat_glVertexP4ui(void *_glfuncs, GLenum gltype, GLuint value);
void gl4_0compat_glVertexP3uiv(void *_glfuncs, GLenum gltype, const GLuint* value);
void gl4_0compat_glVertexP3ui(void *_glfuncs, GLenum gltype, GLuint value);
void gl4_0compat_glVertexP2uiv(void *_glfuncs, GLenum gltype, const GLuint* value);
void gl4_0compat_glVertexP2ui(void *_glfuncs, GLenum gltype, GLuint value);
void gl4_0compat_glGetQueryObjectui64v(void *_glfuncs, GLuint id, GLenum pname, GLuint64* params);
void gl4_0compat_glGetQueryObjecti64v(void *_glfuncs, GLuint id, GLenum pname, GLint64* params);
void gl4_0compat_glQueryCounter(void *_glfuncs, GLuint id, GLenum target);
void gl4_0compat_glGetSamplerParameterIuiv(void *_glfuncs, GLuint sampler, GLenum pname, GLuint* params);
void gl4_0compat_glGetSamplerParameterfv(void *_glfuncs, GLuint sampler, GLenum pname, GLfloat* params);
void gl4_0compat_glGetSamplerParameterIiv(void *_glfuncs, GLuint sampler, GLenum pname, GLint* params);
void gl4_0compat_glGetSamplerParameteriv(void *_glfuncs, GLuint sampler, GLenum pname, GLint* params);
void gl4_0compat_glSamplerParameterIuiv(void *_glfuncs, GLuint sampler, GLenum pname, const GLuint* param);
void gl4_0compat_glSamplerParameterIiv(void *_glfuncs, GLuint sampler, GLenum pname, const GLint* param);
void gl4_0compat_glSamplerParameterfv(void *_glfuncs, GLuint sampler, GLenum pname, const GLfloat* param);
void gl4_0compat_glSamplerParameterf(void *_glfuncs, GLuint sampler, GLenum pname, GLfloat param);
void gl4_0compat_glSamplerParameteriv(void *_glfuncs, GLuint sampler, GLenum pname, const GLint* param);
void gl4_0compat_glSamplerParameteri(void *_glfuncs, GLuint sampler, GLenum pname, GLint param);
void gl4_0compat_glBindSampler(void *_glfuncs, GLuint unit, GLuint sampler);
GLboolean gl4_0compat_glIsSampler(void *_glfuncs, GLuint sampler);
void gl4_0compat_glDeleteSamplers(void *_glfuncs, GLsizei count, const GLuint* samplers);
void gl4_0compat_glGenSamplers(void *_glfuncs, GLsizei count, GLuint* samplers);
GLint gl4_0compat_glGetFragDataIndex(void *_glfuncs, GLuint program, const GLchar* name);
void gl4_0compat_glBindFragDataLocationIndexed(void *_glfuncs, GLuint program, GLuint colorNumber, GLuint index, const GLchar* name);
void gl4_0compat_glVertexAttribDivisor(void *_glfuncs, GLuint index, GLuint divisor);
void gl4_0compat_glGetQueryIndexediv(void *_glfuncs, GLenum target, GLuint index, GLenum pname, GLint* params);
void gl4_0compat_glEndQueryIndexed(void *_glfuncs, GLenum target, GLuint index);
void gl4_0compat_glBeginQueryIndexed(void *_glfuncs, GLenum target, GLuint index, GLuint id);
void gl4_0compat_glDrawTransformFeedbackStream(void *_glfuncs, GLenum mode, GLuint id, GLuint stream);
void gl4_0compat_glDrawTransformFeedback(void *_glfuncs, GLenum mode, GLuint id);
void gl4_0compat_glResumeTransformFeedback(void *_glfuncs);
void gl4_0compat_glPauseTransformFeedback(void *_glfuncs);
GLboolean gl4_0compat_glIsTransformFeedback(void *_glfuncs, GLuint id);
void gl4_0compat_glGenTransformFeedbacks(void *_glfuncs, GLsizei n, GLuint* ids);
void gl4_0compat_glDeleteTransformFeedbacks(void *_glfuncs, GLsizei n, const GLuint* ids);
void gl4_0compat_glBindTransformFeedback(void *_glfuncs, GLenum target, GLuint id);
void gl4_0compat_glPatchParameterfv(void *_glfuncs, GLenum pname, const GLfloat* values);
void gl4_0compat_glPatchParameteri(void *_glfuncs, GLenum pname, GLint value);
void gl4_0compat_glGetProgramStageiv(void *_glfuncs, GLuint program, GLenum shadertype, GLenum pname, GLint* values);
void gl4_0compat_glGetUniformSubroutineuiv(void *_glfuncs, GLenum shadertype, GLint location, GLuint* params);
void gl4_0compat_glUniformSubroutinesuiv(void *_glfuncs, GLenum shadertype, GLsizei count, const GLuint* value);
void gl4_0compat_glGetActiveSubroutineName(void *_glfuncs, GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
void gl4_0compat_glGetActiveSubroutineUniformName(void *_glfuncs, GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
void gl4_0compat_glGetActiveSubroutineUniformiv(void *_glfuncs, GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values);
GLuint gl4_0compat_glGetSubroutineIndex(void *_glfuncs, GLuint program, GLenum shadertype, const GLchar* name);
GLint gl4_0compat_glGetSubroutineUniformLocation(void *_glfuncs, GLuint program, GLenum shadertype, const GLchar* name);
void gl4_0compat_glGetUniformdv(void *_glfuncs, GLuint program, GLint location, GLdouble* params);
void gl4_0compat_glUniformMatrix4x3dv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void gl4_0compat_glUniformMatrix4x2dv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void gl4_0compat_glUniformMatrix3x4dv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void gl4_0compat_glUniformMatrix3x2dv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void gl4_0compat_glUniformMatrix2x4dv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void gl4_0compat_glUniformMatrix2x3dv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void gl4_0compat_glUniformMatrix4dv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void gl4_0compat_glUniformMatrix3dv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void gl4_0compat_glUniformMatrix2dv(void *_glfuncs, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
void gl4_0compat_glUniform4dv(void *_glfuncs, GLint location, GLsizei count, const GLdouble* value);
void gl4_0compat_glUniform3dv(void *_glfuncs, GLint location, GLsizei count, const GLdouble* value);
void gl4_0compat_glUniform2dv(void *_glfuncs, GLint location, GLsizei count, const GLdouble* value);
void gl4_0compat_glUniform1dv(void *_glfuncs, GLint location, GLsizei count, const GLdouble* value);
void gl4_0compat_glUniform4d(void *_glfuncs, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
void gl4_0compat_glUniform3d(void *_glfuncs, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
void gl4_0compat_glUniform2d(void *_glfuncs, GLint location, GLdouble v0, GLdouble v1);
void gl4_0compat_glUniform1d(void *_glfuncs, GLint location, GLdouble v0);
void gl4_0compat_glDrawElementsIndirect(void *_glfuncs, GLenum mode, GLenum gltype, const GLvoid* indirect);
void gl4_0compat_glDrawArraysIndirect(void *_glfuncs, GLenum mode, const GLvoid* indirect);
void gl4_0compat_glBlendFuncSeparatei(void *_glfuncs, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void gl4_0compat_glBlendFunci(void *_glfuncs, GLuint buf, GLenum src, GLenum dst);
void gl4_0compat_glBlendEquationSeparatei(void *_glfuncs, GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void gl4_0compat_glBlendEquationi(void *_glfuncs, GLuint buf, GLenum mode);
void gl4_0compat_glMinSampleShading(void *_glfuncs, GLfloat value);
void gl4_0compat_glTranslatef(void *_glfuncs, GLfloat x, GLfloat y, GLfloat z);
void gl4_0compat_glTranslated(void *_glfuncs, GLdouble x, GLdouble y, GLdouble z);
void gl4_0compat_glScalef(void *_glfuncs, GLfloat x, GLfloat y, GLfloat z);
void gl4_0compat_glScaled(void *_glfuncs, GLdouble x, GLdouble y, GLdouble z);
void gl4_0compat_glRotatef(void *_glfuncs, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void gl4_0compat_glRotated(void *_glfuncs, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void gl4_0compat_glPushMatrix(void *_glfuncs);
void gl4_0compat_glPopMatrix(void *_glfuncs);
void gl4_0compat_glOrtho(void *_glfuncs, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void gl4_0compat_glMultMatrixd(void *_glfuncs, const GLdouble* m);
void gl4_0compat_glMultMatrixf(void *_glfuncs, const GLfloat* m);
void gl4_0compat_glMatrixMode(void *_glfuncs, GLenum mode);
void gl4_0compat_glLoadMatrixd(void *_glfuncs, const GLdouble* m);
void gl4_0compat_glLoadMatrixf(void *_glfuncs, const GLfloat* m);
void gl4_0compat_glLoadIdentity(void *_glfuncs);
void gl4_0compat_glFrustum(void *_glfuncs, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLboolean gl4_0compat_glIsList(void *_glfuncs, GLuint list);
void gl4_0compat_glGetTexGeniv(void *_glfuncs, GLenum coord, GLenum pname, GLint* params);
void gl4_0compat_glGetTexGenfv(void *_glfuncs, GLenum coord, GLenum pname, GLfloat* params);
void gl4_0compat_glGetTexGendv(void *_glfuncs, GLenum coord, GLenum pname, GLdouble* params);
void gl4_0compat_glGetTexEnviv(void *_glfuncs, GLenum target, GLenum pname, GLint* params);
void gl4_0compat_glGetTexEnvfv(void *_glfuncs, GLenum target, GLenum pname, GLfloat* params);
void gl4_0compat_glGetPolygonStipple(void *_glfuncs, GLubyte* mask);
void gl4_0compat_glGetPixelMapusv(void *_glfuncs, GLenum glmap, GLushort* values);
void gl4_0compat_glGetPixelMapuiv(void *_glfuncs, GLenum glmap, GLuint* values);
void gl4_0compat_glGetPixelMapfv(void *_glfuncs, GLenum glmap, GLfloat* values);
void gl4_0compat_glGetMaterialiv(void *_glfuncs, GLenum face, GLenum pname, GLint* params);
void gl4_0compat_glGetMaterialfv(void *_glfuncs, GLenum face, GLenum pname, GLfloat* params);
void gl4_0compat_glGetMapiv(void *_glfuncs, GLenum target, GLenum query, GLint* v);
void gl4_0compat_glGetMapfv(void *_glfuncs, GLenum target, GLenum query, GLfloat* v);
void gl4_0compat_glGetMapdv(void *_glfuncs, GLenum target, GLenum query, GLdouble* v);
void gl4_0compat_glGetLightiv(void *_glfuncs, GLenum light, GLenum pname, GLint* params);
void gl4_0compat_glGetLightfv(void *_glfuncs, GLenum light, GLenum pname, GLfloat* params);
void gl4_0compat_glGetClipPlane(void *_glfuncs, GLenum plane, GLdouble* equation);
void gl4_0compat_glDrawPixels(void *_glfuncs, GLsizei width, GLsizei height, GLenum format, GLenum gltype, const GLvoid* pixels);
void gl4_0compat_glCopyPixels(void *_glfuncs, GLint x, GLint y, GLsizei width, GLsizei height, GLenum gltype);
void gl4_0compat_glPixelMapusv(void *_glfuncs, GLenum glmap, GLint mapsize, const GLushort* values);
void gl4_0compat_glPixelMapuiv(void *_glfuncs, GLenum glmap, GLint mapsize, const GLuint* values);
void gl4_0compat_glPixelMapfv(void *_glfuncs, GLenum glmap, GLint mapsize, const GLfloat* values);
void gl4_0compat_glPixelTransferi(void *_glfuncs, GLenum pname, GLint param);
void gl4_0compat_glPixelTransferf(void *_glfuncs, GLenum pname, GLfloat param);
void gl4_0compat_glPixelZoom(void *_glfuncs, GLfloat xfactor, GLfloat yfactor);
void gl4_0compat_glAlphaFunc(void *_glfuncs, GLenum glfunc, GLfloat ref);
void gl4_0compat_glEvalPoint2(void *_glfuncs, GLint i, GLint j);
void gl4_0compat_glEvalMesh2(void *_glfuncs, GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void gl4_0compat_glEvalPoint1(void *_glfuncs, GLint i);
void gl4_0compat_glEvalMesh1(void *_glfuncs, GLenum mode, GLint i1, GLint i2);
void gl4_0compat_glEvalCoord2fv(void *_glfuncs, const GLfloat* u);
void gl4_0compat_glEvalCoord2f(void *_glfuncs, GLfloat u, GLfloat v);
void gl4_0compat_glEvalCoord2dv(void *_glfuncs, const GLdouble* u);
void gl4_0compat_glEvalCoord2d(void *_glfuncs, GLdouble u, GLdouble v);
void gl4_0compat_glEvalCoord1fv(void *_glfuncs, const GLfloat* u);
void gl4_0compat_glEvalCoord1f(void *_glfuncs, GLfloat u);
void gl4_0compat_glEvalCoord1dv(void *_glfuncs, const GLdouble* u);
void gl4_0compat_glEvalCoord1d(void *_glfuncs, GLdouble u);
void gl4_0compat_glMapGrid2f(void *_glfuncs, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void gl4_0compat_glMapGrid2d(void *_glfuncs, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void gl4_0compat_glMapGrid1f(void *_glfuncs, GLint un, GLfloat u1, GLfloat u2);
void gl4_0compat_glMapGrid1d(void *_glfuncs, GLint un, GLdouble u1, GLdouble u2);
void gl4_0compat_glMap2f(void *_glfuncs, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
void gl4_0compat_glMap2d(void *_glfuncs, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
void gl4_0compat_glMap1f(void *_glfuncs, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
void gl4_0compat_glMap1d(void *_glfuncs, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
void gl4_0compat_glPushAttrib(void *_glfuncs, GLbitfield mask);
void gl4_0compat_glPopAttrib(void *_glfuncs);
void gl4_0compat_glAccum(void *_glfuncs, GLenum op, GLfloat value);
void gl4_0compat_glIndexMask(void *_glfuncs, GLuint mask);
void gl4_0compat_glClearIndex(void *_glfuncs, GLfloat c);
void gl4_0compat_glClearAccum(void *_glfuncs, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void gl4_0compat_glPushName(void *_glfuncs, GLuint name);
void gl4_0compat_glPopName(void *_glfuncs);
void gl4_0compat_glPassThrough(void *_glfuncs, GLfloat token);
void gl4_0compat_glLoadName(void *_glfuncs, GLuint name);
void gl4_0compat_glInitNames(void *_glfuncs);
GLint gl4_0compat_glRenderMode(void *_glfuncs, GLenum mode);
void gl4_0compat_glSelectBuffer(void *_glfuncs, GLsizei size, GLuint* buffer);
void gl4_0compat_glFeedbackBuffer(void *_glfuncs, GLsizei size, GLenum gltype, GLfloat* buffer);
void gl4_0compat_glTexGeniv(void *_glfuncs, GLenum coord, GLenum pname, const GLint* params);
void gl4_0compat_glTexGeni(void *_glfuncs, GLenum coord, GLenum pname, GLint param);
void gl4_0compat_glTexGenfv(void *_glfuncs, GLenum coord, GLenum pname, const GLfloat* params);
void gl4_0compat_glTexGenf(void *_glfuncs, GLenum coord, GLenum pname, GLfloat param);
void gl4_0compat_glTexGendv(void *_glfuncs, GLenum coord, GLenum pname, const GLdouble* params);
void gl4_0compat_glTexGend(void *_glfuncs, GLenum coord, GLenum pname, GLdouble param);
void gl4_0compat_glTexEnviv(void *_glfuncs, GLenum target, GLenum pname, const GLint* params);
void gl4_0compat_glTexEnvi(void *_glfuncs, GLenum target, GLenum pname, GLint param);
void gl4_0compat_glTexEnvfv(void *_glfuncs, GLenum target, GLenum pname, const GLfloat* params);
void gl4_0compat_glTexEnvf(void *_glfuncs, GLenum target, GLenum pname, GLfloat param);
void gl4_0compat_glShadeModel(void *_glfuncs, GLenum mode);
void gl4_0compat_glPolygonStipple(void *_glfuncs, const GLubyte* mask);
void gl4_0compat_glMaterialiv(void *_glfuncs, GLenum face, GLenum pname, const GLint* params);
void gl4_0compat_glMateriali(void *_glfuncs, GLenum face, GLenum pname, GLint param);
void gl4_0compat_glMaterialfv(void *_glfuncs, GLenum face, GLenum pname, const GLfloat* params);
void gl4_0compat_glMaterialf(void *_glfuncs, GLenum face, GLenum pname, GLfloat param);
void gl4_0compat_glLineStipple(void *_glfuncs, GLint factor, GLushort pattern);
void gl4_0compat_glLightModeliv(void *_glfuncs, GLenum pname, const GLint* params);
void gl4_0compat_glLightModeli(void *_glfuncs, GLenum pname, GLint param);
void gl4_0compat_glLightModelfv(void *_glfuncs, GLenum pname, const GLfloat* params);
void gl4_0compat_glLightModelf(void *_glfuncs, GLenum pname, GLfloat param);
void gl4_0compat_glLightiv(void *_glfuncs, GLenum light, GLenum pname, const GLint* params);
void gl4_0compat_glLighti(void *_glfuncs, GLenum light, GLenum pname, GLint param);
void gl4_0compat_glLightfv(void *_glfuncs, GLenum light, GLenum pname, const GLfloat* params);
void gl4_0compat_glLightf(void *_glfuncs, GLenum light, GLenum pname, GLfloat param);
void gl4_0compat_glFogiv(void *_glfuncs, GLenum pname, const GLint* params);
void gl4_0compat_glFogi(void *_glfuncs, GLenum pname, GLint param);
void gl4_0compat_glFogfv(void *_glfuncs, GLenum pname, const GLfloat* params);
void gl4_0compat_glFogf(void *_glfuncs, GLenum pname, GLfloat param);
void gl4_0compat_glColorMaterial(void *_glfuncs, GLenum face, GLenum mode);
void gl4_0compat_glClipPlane(void *_glfuncs, GLenum plane, const GLdouble* equation);
void gl4_0compat_glVertex4sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glVertex4s(void *_glfuncs, GLshort x, GLshort y, GLshort z, GLshort w);
void gl4_0compat_glVertex4iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glVertex4i(void *_glfuncs, GLint x, GLint y, GLint z, GLint w);
void gl4_0compat_glVertex4fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glVertex4f(void *_glfuncs, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void gl4_0compat_glVertex4dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glVertex4d(void *_glfuncs, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void gl4_0compat_glVertex3sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glVertex3s(void *_glfuncs, GLshort x, GLshort y, GLshort z);
void gl4_0compat_glVertex3iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glVertex3i(void *_glfuncs, GLint x, GLint y, GLint z);
void gl4_0compat_glVertex3fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glVertex3f(void *_glfuncs, GLfloat x, GLfloat y, GLfloat z);
void gl4_0compat_glVertex3dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glVertex3d(void *_glfuncs, GLdouble x, GLdouble y, GLdouble z);
void gl4_0compat_glVertex2sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glVertex2s(void *_glfuncs, GLshort x, GLshort y);
void gl4_0compat_glVertex2iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glVertex2i(void *_glfuncs, GLint x, GLint y);
void gl4_0compat_glVertex2fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glVertex2f(void *_glfuncs, GLfloat x, GLfloat y);
void gl4_0compat_glVertex2dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glVertex2d(void *_glfuncs, GLdouble x, GLdouble y);
void gl4_0compat_glTexCoord4sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glTexCoord4s(void *_glfuncs, GLshort s, GLshort t, GLshort r, GLshort q);
void gl4_0compat_glTexCoord4iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glTexCoord4i(void *_glfuncs, GLint s, GLint t, GLint r, GLint q);
void gl4_0compat_glTexCoord4fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glTexCoord4f(void *_glfuncs, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void gl4_0compat_glTexCoord4dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glTexCoord4d(void *_glfuncs, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void gl4_0compat_glTexCoord3sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glTexCoord3s(void *_glfuncs, GLshort s, GLshort t, GLshort r);
void gl4_0compat_glTexCoord3iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glTexCoord3i(void *_glfuncs, GLint s, GLint t, GLint r);
void gl4_0compat_glTexCoord3fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glTexCoord3f(void *_glfuncs, GLfloat s, GLfloat t, GLfloat r);
void gl4_0compat_glTexCoord3dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glTexCoord3d(void *_glfuncs, GLdouble s, GLdouble t, GLdouble r);
void gl4_0compat_glTexCoord2sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glTexCoord2s(void *_glfuncs, GLshort s, GLshort t);
void gl4_0compat_glTexCoord2iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glTexCoord2i(void *_glfuncs, GLint s, GLint t);
void gl4_0compat_glTexCoord2fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glTexCoord2f(void *_glfuncs, GLfloat s, GLfloat t);
void gl4_0compat_glTexCoord2dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glTexCoord2d(void *_glfuncs, GLdouble s, GLdouble t);
void gl4_0compat_glTexCoord1sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glTexCoord1s(void *_glfuncs, GLshort s);
void gl4_0compat_glTexCoord1iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glTexCoord1i(void *_glfuncs, GLint s);
void gl4_0compat_glTexCoord1fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glTexCoord1f(void *_glfuncs, GLfloat s);
void gl4_0compat_glTexCoord1dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glTexCoord1d(void *_glfuncs, GLdouble s);
void gl4_0compat_glRectsv(void *_glfuncs, const GLshort* v1, const GLshort* v2);
void gl4_0compat_glRects(void *_glfuncs, GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void gl4_0compat_glRectiv(void *_glfuncs, const GLint* v1, const GLint* v2);
void gl4_0compat_glRecti(void *_glfuncs, GLint x1, GLint y1, GLint x2, GLint y2);
void gl4_0compat_glRectfv(void *_glfuncs, const GLfloat* v1, const GLfloat* v2);
void gl4_0compat_glRectf(void *_glfuncs, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void gl4_0compat_glRectdv(void *_glfuncs, const GLdouble* v1, const GLdouble* v2);
void gl4_0compat_glRectd(void *_glfuncs, GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
void gl4_0compat_glRasterPos4sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glRasterPos4s(void *_glfuncs, GLshort x, GLshort y, GLshort z, GLshort w);
void gl4_0compat_glRasterPos4iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glRasterPos4i(void *_glfuncs, GLint x, GLint y, GLint z, GLint w);
void gl4_0compat_glRasterPos4fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glRasterPos4f(void *_glfuncs, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void gl4_0compat_glRasterPos4dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glRasterPos4d(void *_glfuncs, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void gl4_0compat_glRasterPos3sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glRasterPos3s(void *_glfuncs, GLshort x, GLshort y, GLshort z);
void gl4_0compat_glRasterPos3iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glRasterPos3i(void *_glfuncs, GLint x, GLint y, GLint z);
void gl4_0compat_glRasterPos3fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glRasterPos3f(void *_glfuncs, GLfloat x, GLfloat y, GLfloat z);
void gl4_0compat_glRasterPos3dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glRasterPos3d(void *_glfuncs, GLdouble x, GLdouble y, GLdouble z);
void gl4_0compat_glRasterPos2sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glRasterPos2s(void *_glfuncs, GLshort x, GLshort y);
void gl4_0compat_glRasterPos2iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glRasterPos2i(void *_glfuncs, GLint x, GLint y);
void gl4_0compat_glRasterPos2fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glRasterPos2f(void *_glfuncs, GLfloat x, GLfloat y);
void gl4_0compat_glRasterPos2dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glRasterPos2d(void *_glfuncs, GLdouble x, GLdouble y);
void gl4_0compat_glNormal3sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glNormal3s(void *_glfuncs, GLshort nx, GLshort ny, GLshort nz);
void gl4_0compat_glNormal3iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glNormal3i(void *_glfuncs, GLint nx, GLint ny, GLint nz);
void gl4_0compat_glNormal3fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glNormal3f(void *_glfuncs, GLfloat nx, GLfloat ny, GLfloat nz);
void gl4_0compat_glNormal3dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glNormal3d(void *_glfuncs, GLdouble nx, GLdouble ny, GLdouble nz);
void gl4_0compat_glNormal3bv(void *_glfuncs, const GLbyte* v);
void gl4_0compat_glNormal3b(void *_glfuncs, GLbyte nx, GLbyte ny, GLbyte nz);
void gl4_0compat_glIndexsv(void *_glfuncs, const GLshort* c);
void gl4_0compat_glIndexs(void *_glfuncs, GLshort c);
void gl4_0compat_glIndexiv(void *_glfuncs, const GLint* c);
void gl4_0compat_glIndexi(void *_glfuncs, GLint c);
void gl4_0compat_glIndexfv(void *_glfuncs, const GLfloat* c);
void gl4_0compat_glIndexf(void *_glfuncs, GLfloat c);
void gl4_0compat_glIndexdv(void *_glfuncs, const GLdouble* c);
void gl4_0compat_glIndexd(void *_glfuncs, GLdouble c);
void gl4_0compat_glEnd(void *_glfuncs);
void gl4_0compat_glEdgeFlagv(void *_glfuncs, const GLboolean* flag);
void gl4_0compat_glEdgeFlag(void *_glfuncs, GLboolean flag);
void gl4_0compat_glColor4usv(void *_glfuncs, const GLushort* v);
void gl4_0compat_glColor4us(void *_glfuncs, GLushort red, GLushort green, GLushort blue, GLushort alpha);
void gl4_0compat_glColor4uiv(void *_glfuncs, const GLuint* v);
void gl4_0compat_glColor4ui(void *_glfuncs, GLuint red, GLuint green, GLuint blue, GLuint alpha);
void gl4_0compat_glColor4ubv(void *_glfuncs, const GLubyte* v);
void gl4_0compat_glColor4ub(void *_glfuncs, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void gl4_0compat_glColor4sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glColor4s(void *_glfuncs, GLshort red, GLshort green, GLshort blue, GLshort alpha);
void gl4_0compat_glColor4iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glColor4i(void *_glfuncs, GLint red, GLint green, GLint blue, GLint alpha);
void gl4_0compat_glColor4fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glColor4f(void *_glfuncs, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void gl4_0compat_glColor4dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glColor4d(void *_glfuncs, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void gl4_0compat_glColor4bv(void *_glfuncs, const GLbyte* v);
void gl4_0compat_glColor4b(void *_glfuncs, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void gl4_0compat_glColor3usv(void *_glfuncs, const GLushort* v);
void gl4_0compat_glColor3us(void *_glfuncs, GLushort red, GLushort green, GLushort blue);
void gl4_0compat_glColor3uiv(void *_glfuncs, const GLuint* v);
void gl4_0compat_glColor3ui(void *_glfuncs, GLuint red, GLuint green, GLuint blue);
void gl4_0compat_glColor3ubv(void *_glfuncs, const GLubyte* v);
void gl4_0compat_glColor3ub(void *_glfuncs, GLubyte red, GLubyte green, GLubyte blue);
void gl4_0compat_glColor3sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glColor3s(void *_glfuncs, GLshort red, GLshort green, GLshort blue);
void gl4_0compat_glColor3iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glColor3i(void *_glfuncs, GLint red, GLint green, GLint blue);
void gl4_0compat_glColor3fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glColor3f(void *_glfuncs, GLfloat red, GLfloat green, GLfloat blue);
void gl4_0compat_glColor3dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glColor3d(void *_glfuncs, GLdouble red, GLdouble green, GLdouble blue);
void gl4_0compat_glColor3bv(void *_glfuncs, const GLbyte* v);
void gl4_0compat_glColor3b(void *_glfuncs, GLbyte red, GLbyte green, GLbyte blue);
void gl4_0compat_glBitmap(void *_glfuncs, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap);
void gl4_0compat_glBegin(void *_glfuncs, GLenum mode);
void gl4_0compat_glListBase(void *_glfuncs, GLuint base);
GLuint gl4_0compat_glGenLists(void *_glfuncs, GLsizei range_);
void gl4_0compat_glDeleteLists(void *_glfuncs, GLuint list, GLsizei range_);
void gl4_0compat_glCallLists(void *_glfuncs, GLsizei n, GLenum gltype, const GLvoid* lists);
void gl4_0compat_glCallList(void *_glfuncs, GLuint list);
void gl4_0compat_glEndList(void *_glfuncs);
void gl4_0compat_glNewList(void *_glfuncs, GLuint list, GLenum mode);
void gl4_0compat_glPushClientAttrib(void *_glfuncs, GLbitfield mask);
void gl4_0compat_glPopClientAttrib(void *_glfuncs);
void gl4_0compat_glPrioritizeTextures(void *_glfuncs, GLsizei n, const GLuint* textures, const GLfloat* priorities);
GLboolean gl4_0compat_glAreTexturesResident(void *_glfuncs, GLsizei n, const GLuint* textures, GLboolean* residences);
void gl4_0compat_glVertexPointer(void *_glfuncs, GLint size, GLenum gltype, GLsizei stride, const GLvoid* pointer);
void gl4_0compat_glTexCoordPointer(void *_glfuncs, GLint size, GLenum gltype, GLsizei stride, const GLvoid* pointer);
void gl4_0compat_glNormalPointer(void *_glfuncs, GLenum gltype, GLsizei stride, const GLvoid* pointer);
void gl4_0compat_glInterleavedArrays(void *_glfuncs, GLenum format, GLsizei stride, const GLvoid* pointer);
void gl4_0compat_glIndexPointer(void *_glfuncs, GLenum gltype, GLsizei stride, const GLvoid* pointer);
void gl4_0compat_glEnableClientState(void *_glfuncs, GLenum array);
void gl4_0compat_glEdgeFlagPointer(void *_glfuncs, GLsizei stride, const GLvoid* pointer);
void gl4_0compat_glDisableClientState(void *_glfuncs, GLenum array);
void gl4_0compat_glColorPointer(void *_glfuncs, GLint size, GLenum gltype, GLsizei stride, const GLvoid* pointer);
void gl4_0compat_glArrayElement(void *_glfuncs, GLint i);
void gl4_0compat_glResetMinmax(void *_glfuncs, GLenum target);
void gl4_0compat_glResetHistogram(void *_glfuncs, GLenum target);
void gl4_0compat_glMinmax(void *_glfuncs, GLenum target, GLenum internalFormat, GLboolean sink);
void gl4_0compat_glHistogram(void *_glfuncs, GLenum target, GLsizei width, GLenum internalFormat, GLboolean sink);
void gl4_0compat_glGetMinmaxParameteriv(void *_glfuncs, GLenum target, GLenum pname, GLint* params);
void gl4_0compat_glGetMinmaxParameterfv(void *_glfuncs, GLenum target, GLenum pname, GLfloat* params);
void gl4_0compat_glGetMinmax(void *_glfuncs, GLenum target, GLboolean reset, GLenum format, GLenum gltype, GLvoid* values);
void gl4_0compat_glGetHistogramParameteriv(void *_glfuncs, GLenum target, GLenum pname, GLint* params);
void gl4_0compat_glGetHistogramParameterfv(void *_glfuncs, GLenum target, GLenum pname, GLfloat* params);
void gl4_0compat_glGetHistogram(void *_glfuncs, GLenum target, GLboolean reset, GLenum format, GLenum gltype, GLvoid* values);
void gl4_0compat_glSeparableFilter2D(void *_glfuncs, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum gltype, const GLvoid* row, const GLvoid* column);
void gl4_0compat_glGetSeparableFilter(void *_glfuncs, GLenum target, GLenum format, GLenum gltype, GLvoid* row, GLvoid* column, GLvoid* span);
void gl4_0compat_glGetConvolutionParameteriv(void *_glfuncs, GLenum target, GLenum pname, GLint* params);
void gl4_0compat_glGetConvolutionParameterfv(void *_glfuncs, GLenum target, GLenum pname, GLfloat* params);
void gl4_0compat_glGetConvolutionFilter(void *_glfuncs, GLenum target, GLenum format, GLenum gltype, GLvoid* image);
void gl4_0compat_glCopyConvolutionFilter2D(void *_glfuncs, GLenum target, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height);
void gl4_0compat_glCopyConvolutionFilter1D(void *_glfuncs, GLenum target, GLenum internalFormat, GLint x, GLint y, GLsizei width);
void gl4_0compat_glConvolutionParameteriv(void *_glfuncs, GLenum target, GLenum pname, const GLint* params);
void gl4_0compat_glConvolutionParameteri(void *_glfuncs, GLenum target, GLenum pname, GLint params);
void gl4_0compat_glConvolutionParameterfv(void *_glfuncs, GLenum target, GLenum pname, const GLfloat* params);
void gl4_0compat_glConvolutionParameterf(void *_glfuncs, GLenum target, GLenum pname, GLfloat params);
void gl4_0compat_glConvolutionFilter2D(void *_glfuncs, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum gltype, const GLvoid* image);
void gl4_0compat_glConvolutionFilter1D(void *_glfuncs, GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum gltype, const GLvoid* image);
void gl4_0compat_glCopyColorSubTable(void *_glfuncs, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
void gl4_0compat_glColorSubTable(void *_glfuncs, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum gltype, const GLvoid* data);
void gl4_0compat_glGetColorTableParameteriv(void *_glfuncs, GLenum target, GLenum pname, GLint* params);
void gl4_0compat_glGetColorTableParameterfv(void *_glfuncs, GLenum target, GLenum pname, GLfloat* params);
void gl4_0compat_glGetColorTable(void *_glfuncs, GLenum target, GLenum format, GLenum gltype, GLvoid* table);
void gl4_0compat_glCopyColorTable(void *_glfuncs, GLenum target, GLenum internalFormat, GLint x, GLint y, GLsizei width);
void gl4_0compat_glColorTableParameteriv(void *_glfuncs, GLenum target, GLenum pname, const GLint* params);
void gl4_0compat_glColorTableParameterfv(void *_glfuncs, GLenum target, GLenum pname, const GLfloat* params);
void gl4_0compat_glColorTable(void *_glfuncs, GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum gltype, const GLvoid* table);
void gl4_0compat_glMultTransposeMatrixd(void *_glfuncs, const GLdouble* m);
void gl4_0compat_glMultTransposeMatrixf(void *_glfuncs, const GLfloat* m);
void gl4_0compat_glLoadTransposeMatrixd(void *_glfuncs, const GLdouble* m);
void gl4_0compat_glLoadTransposeMatrixf(void *_glfuncs, const GLfloat* m);
void gl4_0compat_glMultiTexCoord4sv(void *_glfuncs, GLenum target, const GLshort* v);
void gl4_0compat_glMultiTexCoord4s(void *_glfuncs, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void gl4_0compat_glMultiTexCoord4iv(void *_glfuncs, GLenum target, const GLint* v);
void gl4_0compat_glMultiTexCoord4i(void *_glfuncs, GLenum target, GLint s, GLint t, GLint r, GLint q);
void gl4_0compat_glMultiTexCoord4fv(void *_glfuncs, GLenum target, const GLfloat* v);
void gl4_0compat_glMultiTexCoord4f(void *_glfuncs, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void gl4_0compat_glMultiTexCoord4dv(void *_glfuncs, GLenum target, const GLdouble* v);
void gl4_0compat_glMultiTexCoord4d(void *_glfuncs, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void gl4_0compat_glMultiTexCoord3sv(void *_glfuncs, GLenum target, const GLshort* v);
void gl4_0compat_glMultiTexCoord3s(void *_glfuncs, GLenum target, GLshort s, GLshort t, GLshort r);
void gl4_0compat_glMultiTexCoord3iv(void *_glfuncs, GLenum target, const GLint* v);
void gl4_0compat_glMultiTexCoord3i(void *_glfuncs, GLenum target, GLint s, GLint t, GLint r);
void gl4_0compat_glMultiTexCoord3fv(void *_glfuncs, GLenum target, const GLfloat* v);
void gl4_0compat_glMultiTexCoord3f(void *_glfuncs, GLenum target, GLfloat s, GLfloat t, GLfloat r);
void gl4_0compat_glMultiTexCoord3dv(void *_glfuncs, GLenum target, const GLdouble* v);
void gl4_0compat_glMultiTexCoord3d(void *_glfuncs, GLenum target, GLdouble s, GLdouble t, GLdouble r);
void gl4_0compat_glMultiTexCoord2sv(void *_glfuncs, GLenum target, const GLshort* v);
void gl4_0compat_glMultiTexCoord2s(void *_glfuncs, GLenum target, GLshort s, GLshort t);
void gl4_0compat_glMultiTexCoord2iv(void *_glfuncs, GLenum target, const GLint* v);
void gl4_0compat_glMultiTexCoord2i(void *_glfuncs, GLenum target, GLint s, GLint t);
void gl4_0compat_glMultiTexCoord2fv(void *_glfuncs, GLenum target, const GLfloat* v);
void gl4_0compat_glMultiTexCoord2f(void *_glfuncs, GLenum target, GLfloat s, GLfloat t);
void gl4_0compat_glMultiTexCoord2dv(void *_glfuncs, GLenum target, const GLdouble* v);
void gl4_0compat_glMultiTexCoord2d(void *_glfuncs, GLenum target, GLdouble s, GLdouble t);
void gl4_0compat_glMultiTexCoord1sv(void *_glfuncs, GLenum target, const GLshort* v);
void gl4_0compat_glMultiTexCoord1s(void *_glfuncs, GLenum target, GLshort s);
void gl4_0compat_glMultiTexCoord1iv(void *_glfuncs, GLenum target, const GLint* v);
void gl4_0compat_glMultiTexCoord1i(void *_glfuncs, GLenum target, GLint s);
void gl4_0compat_glMultiTexCoord1fv(void *_glfuncs, GLenum target, const GLfloat* v);
void gl4_0compat_glMultiTexCoord1f(void *_glfuncs, GLenum target, GLfloat s);
void gl4_0compat_glMultiTexCoord1dv(void *_glfuncs, GLenum target, const GLdouble* v);
void gl4_0compat_glMultiTexCoord1d(void *_glfuncs, GLenum target, GLdouble s);
void gl4_0compat_glClientActiveTexture(void *_glfuncs, GLenum texture);
void gl4_0compat_glWindowPos3sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glWindowPos3s(void *_glfuncs, GLshort x, GLshort y, GLshort z);
void gl4_0compat_glWindowPos3iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glWindowPos3i(void *_glfuncs, GLint x, GLint y, GLint z);
void gl4_0compat_glWindowPos3fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glWindowPos3f(void *_glfuncs, GLfloat x, GLfloat y, GLfloat z);
void gl4_0compat_glWindowPos3dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glWindowPos3d(void *_glfuncs, GLdouble x, GLdouble y, GLdouble z);
void gl4_0compat_glWindowPos2sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glWindowPos2s(void *_glfuncs, GLshort x, GLshort y);
void gl4_0compat_glWindowPos2iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glWindowPos2i(void *_glfuncs, GLint x, GLint y);
void gl4_0compat_glWindowPos2fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glWindowPos2f(void *_glfuncs, GLfloat x, GLfloat y);
void gl4_0compat_glWindowPos2dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glWindowPos2d(void *_glfuncs, GLdouble x, GLdouble y);
void gl4_0compat_glSecondaryColorPointer(void *_glfuncs, GLint size, GLenum gltype, GLsizei stride, const GLvoid* pointer);
void gl4_0compat_glSecondaryColor3usv(void *_glfuncs, const GLushort* v);
void gl4_0compat_glSecondaryColor3us(void *_glfuncs, GLushort red, GLushort green, GLushort blue);
void gl4_0compat_glSecondaryColor3uiv(void *_glfuncs, const GLuint* v);
void gl4_0compat_glSecondaryColor3ui(void *_glfuncs, GLuint red, GLuint green, GLuint blue);
void gl4_0compat_glSecondaryColor3ubv(void *_glfuncs, const GLubyte* v);
void gl4_0compat_glSecondaryColor3ub(void *_glfuncs, GLubyte red, GLubyte green, GLubyte blue);
void gl4_0compat_glSecondaryColor3sv(void *_glfuncs, const GLshort* v);
void gl4_0compat_glSecondaryColor3s(void *_glfuncs, GLshort red, GLshort green, GLshort blue);
void gl4_0compat_glSecondaryColor3iv(void *_glfuncs, const GLint* v);
void gl4_0compat_glSecondaryColor3i(void *_glfuncs, GLint red, GLint green, GLint blue);
void gl4_0compat_glSecondaryColor3fv(void *_glfuncs, const GLfloat* v);
void gl4_0compat_glSecondaryColor3f(void *_glfuncs, GLfloat red, GLfloat green, GLfloat blue);
void gl4_0compat_glSecondaryColor3dv(void *_glfuncs, const GLdouble* v);
void gl4_0compat_glSecondaryColor3d(void *_glfuncs, GLdouble red, GLdouble green, GLdouble blue);
void gl4_0compat_glSecondaryColor3bv(void *_glfuncs, const GLbyte* v);
void gl4_0compat_glSecondaryColor3b(void *_glfuncs, GLbyte red, GLbyte green, GLbyte blue);
void gl4_0compat_glFogCoordPointer(void *_glfuncs, GLenum gltype, GLsizei stride, const GLvoid* pointer);
void gl4_0compat_glFogCoorddv(void *_glfuncs, const GLdouble* coord);
void gl4_0compat_glFogCoordd(void *_glfuncs, GLdouble coord);
void gl4_0compat_glFogCoordfv(void *_glfuncs, const GLfloat* coord);
void gl4_0compat_glFogCoordf(void *_glfuncs, GLfloat coord);
void gl4_0compat_glVertexAttrib4usv(void *_glfuncs, GLuint index, const GLushort* v);
void gl4_0compat_glVertexAttrib4uiv(void *_glfuncs, GLuint index, const GLuint* v);
void gl4_0compat_glVertexAttrib4ubv(void *_glfuncs, GLuint index, const GLubyte* v);
void gl4_0compat_glVertexAttrib4sv(void *_glfuncs, GLuint index, const GLshort* v);
void gl4_0compat_glVertexAttrib4s(void *_glfuncs, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void gl4_0compat_glVertexAttrib4iv(void *_glfuncs, GLuint index, const GLint* v);
void gl4_0compat_glVertexAttrib4fv(void *_glfuncs, GLuint index, const GLfloat* v);
void gl4_0compat_glVertexAttrib4f(void *_glfuncs, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void gl4_0compat_glVertexAttrib4dv(void *_glfuncs, GLuint index, const GLdouble* v);
void gl4_0compat_glVertexAttrib4d(void *_glfuncs, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void gl4_0compat_glVertexAttrib4bv(void *_glfuncs, GLuint index, const GLbyte* v);
void gl4_0compat_glVertexAttrib4Nusv(void *_glfuncs, GLuint index, const GLushort* v);
void gl4_0compat_glVertexAttrib4Nuiv(void *_glfuncs, GLuint index, const GLuint* v);
void gl4_0compat_glVertexAttrib4Nubv(void *_glfuncs, GLuint index, const GLubyte* v);
void gl4_0compat_glVertexAttrib4Nub(void *_glfuncs, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void gl4_0compat_glVertexAttrib4Nsv(void *_glfuncs, GLuint index, const GLshort* v);
void gl4_0compat_glVertexAttrib4Niv(void *_glfuncs, GLuint index, const GLint* v);
void gl4_0compat_glVertexAttrib4Nbv(void *_glfuncs, GLuint index, const GLbyte* v);
void gl4_0compat_glVertexAttrib3sv(void *_glfuncs, GLuint index, const GLshort* v);
void gl4_0compat_glVertexAttrib3s(void *_glfuncs, GLuint index, GLshort x, GLshort y, GLshort z);
void gl4_0compat_glVertexAttrib3fv(void *_glfuncs, GLuint index, const GLfloat* v);
void gl4_0compat_glVertexAttrib3f(void *_glfuncs, GLuint index, GLfloat x, GLfloat y, GLfloat z);
void gl4_0compat_glVertexAttrib3dv(void *_glfuncs, GLuint index, const GLdouble* v);
void gl4_0compat_glVertexAttrib3d(void *_glfuncs, GLuint index, GLdouble x, GLdouble y, GLdouble z);
void gl4_0compat_glVertexAttrib2sv(void *_glfuncs, GLuint index, const GLshort* v);
void gl4_0compat_glVertexAttrib2s(void *_glfuncs, GLuint index, GLshort x, GLshort y);
void gl4_0compat_glVertexAttrib2fv(void *_glfuncs, GLuint index, const GLfloat* v);
void gl4_0compat_glVertexAttrib2f(void *_glfuncs, GLuint index, GLfloat x, GLfloat y);
void gl4_0compat_glVertexAttrib2dv(void *_glfuncs, GLuint index, const GLdouble* v);
void gl4_0compat_glVertexAttrib2d(void *_glfuncs, GLuint index, GLdouble x, GLdouble y);
void gl4_0compat_glVertexAttrib1sv(void *_glfuncs, GLuint index, const GLshort* v);
void gl4_0compat_glVertexAttrib1s(void *_glfuncs, GLuint index, GLshort x);
void gl4_0compat_glVertexAttrib1fv(void *_glfuncs, GLuint index, const GLfloat* v);
void gl4_0compat_glVertexAttrib1f(void *_glfuncs, GLuint index, GLfloat x);
void gl4_0compat_glVertexAttrib1dv(void *_glfuncs, GLuint index, const GLdouble* v);
void gl4_0compat_glVertexAttrib1d(void *_glfuncs, GLuint index, GLdouble x);
void gl4_0compat_glVertexAttribI4usv(void *_glfuncs, GLuint index, const GLushort* v);
void gl4_0compat_glVertexAttribI4ubv(void *_glfuncs, GLuint index, const GLubyte* v);
void gl4_0compat_glVertexAttribI4sv(void *_glfuncs, GLuint index, const GLshort* v);
void gl4_0compat_glVertexAttribI4bv(void *_glfuncs, GLuint index, const GLbyte* v);
void gl4_0compat_glVertexAttribI4uiv(void *_glfuncs, GLuint index, const GLuint* v);
void gl4_0compat_glVertexAttribI3uiv(void *_glfuncs, GLuint index, const GLuint* v);
void gl4_0compat_glVertexAttribI2uiv(void *_glfuncs, GLuint index, const GLuint* v);
void gl4_0compat_glVertexAttribI1uiv(void *_glfuncs, GLuint index, const GLuint* v);
void gl4_0compat_glVertexAttribI4iv(void *_glfuncs, GLuint index, const GLint* v);
void gl4_0compat_glVertexAttribI3iv(void *_glfuncs, GLuint index, const GLint* v);
void gl4_0compat_glVertexAttribI2iv(void *_glfuncs, GLuint index, const GLint* v);
void gl4_0compat_glVertexAttribI1iv(void *_glfuncs, GLuint index, const GLint* v);
void gl4_0compat_glVertexAttribI4ui(void *_glfuncs, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void gl4_0compat_glVertexAttribI3ui(void *_glfuncs, GLuint index, GLuint x, GLuint y, GLuint z);
void gl4_0compat_glVertexAttribI2ui(void *_glfuncs, GLuint index, GLuint x, GLuint y);
void gl4_0compat_glVertexAttribI1ui(void *_glfuncs, GLuint index, GLuint x);
void gl4_0compat_glVertexAttribI4i(void *_glfuncs, GLuint index, GLint x, GLint y, GLint z, GLint w);
void gl4_0compat_glVertexAttribI3i(void *_glfuncs, GLuint index, GLint x, GLint y, GLint z);
void gl4_0compat_glVertexAttribI2i(void *_glfuncs, GLuint index, GLint x, GLint y);
void gl4_0compat_glVertexAttribI1i(void *_glfuncs, GLuint index, GLint x);


#ifdef __cplusplus
} // extern "C"
#endif
